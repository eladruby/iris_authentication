#ייבוא ספריות
import tensorflow as tf

#פונקציה הבנונה את המודל
#input_shape - גובה ורוחב התמונה ומימדה השלישי (3) שזה צבעוני
def build_unet(input_shape=(128, 128, 3)):
    #הגדרת קלט המודל
    inputs = tf.keras.Input(shape=input_shape)
    x = inputs

    #פטנקציה היוצרת שלוש שכבות בקצף בכדי להקל על כתיבת הקוד
    def conv_block(x, filters, dropout):
        #שכבת קונבולוציה עם פילטרים בגודל 3 על 3
        #אקטיבציית רלו
        #padding='same' כך שהשכבה לא תקטין את התמונה
        #kernel_initializer='he_normal' כך שהמשקולות יתחילו באיזור האפס
        x = tf.keras.layers.Conv2D(filters, 3, activation='relu', padding='same', kernel_initializer='he_normal')(x)
        #Dropout שכבת 
        x = tf.keras.layers.Dropout(dropout)(x)
        #עוד שכבת קונבולוציה זהה בגודל הפילטרים, האקטיבציה, שמירת ממדי התמונה ואתחולי המשקולות בדיוק כמו השכבה הראשונה
        x = tf.keras.layers.Conv2D(filters, 3, activation='relu', padding='same', kernel_initializer='he_normal')(x)
        #החזרת שלושת השכבות
        return x

    #יצירת שלושת השכבות שכתבנו מקודם כך שלשכבות הקונבולוציה יש 16 פילטרים ורמת החוזק של הדרופאוט הוא 0.1
    c1 = conv_block(x, 16, 0.1)
    #שכבת מקס פולינג בגודל 2 על 2
    p1 = tf.keras.layers.MaxPooling2D((2, 2))(c1)

    #יצירת שלושת השכבות שכתבנו מקודם כך שלשכבות הקונבולוציה יש 32 פילטרים ורמת החוזק של הדרופאוט הוא 0.1
    c2 = conv_block(p1, 32, 0.1)
    #שכבת מקס פולינג בגודל 2 על 2
    p2 = tf.keras.layers.MaxPooling2D((2, 2))(c2)

    #יצירת שלושת השכבות שכתבנו מקודם כך שלשכבות הקונבולוציה יש 64 פילטרים ורמת החוזק של הדרופאוט הוא 0.2
    c3 = conv_block(p2, 64, 0.2)
    #שכבת מקס פולינג בגודל 2 על 2
    p3 = tf.keras.layers.MaxPooling2D((2, 2))(c3)

    #יצירת שלושת השכבות שכתבנו מקודם כך שלשכבות הקונבולוציה יש 128 פילטרים ורמת החוזק של הדרופאוט הוא 0.2
    c4 = conv_block(p3, 128, 0.2)
    #שכבת מקס פולינג בגודל 2 על 2
    p4 = tf.keras.layers.MaxPooling2D((2, 2))(c4)

    #יצירת שלושת השכבות שכתבנו מקודם כך שלשכבות הקונבולוציה יש 256 פילטרים ורמת החוזק של הדרופאוט הוא 0.3
    c5 = conv_block(p4, 256, 0.3)

    #פונקציה שיוצרת 5 שכבות - 2 שכבות חדשות ו3 שכבות מהפונקציה שבנינו קודם לכן
    #skip הפונקציה מקבלת את מספר השכבה שאמורה להעביר אליה את הדאטה ההתחלתי 
    #x הפונקציה מקבלת את השכבה הקודמת
    #filters הפונקציה מקבלת את מספר הפילטרים
    #dropout הפונקציה מקבלת את רמת החוזק של הדרופאוט
    def up_block(x, skip, filters, dropout):
        #המגדילה את ממדי התמונה, בדיוק ההפך משכבת קונבולוציה רגילה Unsampling שכבת 
        #kernel_initializer='he_uniform' מה שנותן תוצאות טובות יותר עם איתחול משקולות relu מאחר וכל המודל עובד עם 
        #נבנה בהתחשבות באקטיבציית רלו כך שהיא תשמור על מצב שבו פחות משקלים ימותו ופחות משקלים יתפוצצו
        x = tf.keras.layers.Conv2DTranspose(filters, 2, strides=2, padding='same', kernel_initializer='he_uniform')(x)
        #פונקציה המחברת את הדאטה מהשכבה המקבילה בכדי ליצור מידע חדש עם הבנה מורחבת יחד עם השכבות הראשונות שעדיין לא עמוקות
        #x - השכבה הקודמת
        #skip - השכבה המקבילה
        x = tf.keras.layers.Concatenate()([x, skip])
        #פונקציה היוצרת את שלושת השכבות שיצרנו מקודם
        x = conv_block(x, filters, dropout)
        return x

    #עם 128 פילטרים ולאחר מכן פונקציית חיבור מידע ואז שוב שלוש שכבות Unsampling שימוש בפונקציה שהכנו ליצירת שכבת
    #שכבת קונבולוציה שגם היא בעלת 128 פילטרים של 3 על 3 ואז שכבת דרופאוט עם רמת חוזק של 0.2 ואזעוד שכבת קונבולוציה זהה
    u6 = up_block(c5, c4, 128, 0.2)
    #עם 64 פילטרים ולאחר מכן פונקציית חיבור מידע ואז שוב שלוש שכבות Unsampling שימוש בפונקציה שהכנו ליצירת שכבת
    #שכבת קונבולוציה שגם היא בעלת 64 פילטרים של 3 על 3 ואז שכבת דרופאוט עם רמת חוזק של 0.2 ואזעוד שכבת קונבולוציה זהה
    u7 = up_block(u6, c3, 64, 0.2)
    #עם 32 פילטרים ולאחר מכן פונקציית חיבור מידע ואז שוב שלוש שכבות Unsampling שימוש בפונקציה שהכנו ליצירת שכבת
    #שכבת קונבולוציה שגם היא בעלת 32 פילטרים של 3 על 3 ואז שכבת דרופאוט עם רמת חוזק של 0.1 ואזעוד שכבת קונבולוציה זהה
    u8 = up_block(u7, c2, 32, 0.1)
    #עם 16 פילטרים ולאחר מכן פונקציית חיבור מידע ואז שוב שלוש שכבות Unsampling שימוש בפונקציה שהכנו ליצירת שכבת
    #שכבת קונבולוציה שגם היא בעלת 16 פילטרים של 3 על 3 ואז שכבת דרופאוט עם רמת חוזק של 0.1 ואזעוד שכבת קונבולוציה זהה
    u9 = up_block(u8, c1, 16, 0.1)

    #הגדרת השכבה הסופית של המודל כשכבת קונבולוציה עם 1 פילטר בגודל 1 על 1 עם אקטיבציה סיגמואידית
    #מהסיבה הפשוטה שזה יגרום למחיקה של המבנה המרחבי של התמונה ולא שומר את ממדיה אלה משטח הכל לווקטור אחד Dense אנחנו לא משטחים את הפלא ומעבירים אותו בשכבת 
    outputs = tf.keras.layers.Conv2D(1, 1, activation='sigmoid')(u9)

    #הגדרת המודל עם הקלט והפלט שהגדרנו בהתחלה
    model = tf.keras.Model(inputs, outputs)
    #החזרת המודל הגמור
    return model